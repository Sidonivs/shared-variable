# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import shared_variable_pb2 as shared__variable__pb2


class SharedVariableStub(object):
    """Topology control 
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Join = channel.unary_unary(
                '/SharedVariable/Join',
                request_serializer=shared__variable__pb2.JoinReq.SerializeToString,
                response_deserializer=shared__variable__pb2.JoinReply.FromString,
                )
        self.ChangePrev = channel.unary_unary(
                '/SharedVariable/ChangePrev',
                request_serializer=shared__variable__pb2.ChangePrevMsg.SerializeToString,
                response_deserializer=shared__variable__pb2.Address.FromString,
                )
        self.ChangeNNext = channel.unary_unary(
                '/SharedVariable/ChangeNNext',
                request_serializer=shared__variable__pb2.ChangeNNextMsg.SerializeToString,
                response_deserializer=shared__variable__pb2.Ack.FromString,
                )
        self.NodeMissing = channel.unary_unary(
                '/SharedVariable/NodeMissing',
                request_serializer=shared__variable__pb2.NodeMissingMsg.SerializeToString,
                response_deserializer=shared__variable__pb2.Ack.FromString,
                )
        self.TopologyRepairComplete = channel.unary_unary(
                '/SharedVariable/TopologyRepairComplete',
                request_serializer=shared__variable__pb2.TopologyRepairCompleteMsg.SerializeToString,
                response_deserializer=shared__variable__pb2.Ack.FromString,
                )
        self.Election = channel.unary_unary(
                '/SharedVariable/Election',
                request_serializer=shared__variable__pb2.ElectionMsg.SerializeToString,
                response_deserializer=shared__variable__pb2.Ack.FromString,
                )
        self.Elected = channel.unary_unary(
                '/SharedVariable/Elected',
                request_serializer=shared__variable__pb2.ElectedMsg.SerializeToString,
                response_deserializer=shared__variable__pb2.Ack.FromString,
                )
        self.ReadVar = channel.unary_unary(
                '/SharedVariable/ReadVar',
                request_serializer=shared__variable__pb2.ReadVarReq.SerializeToString,
                response_deserializer=shared__variable__pb2.ReadVarReply.FromString,
                )
        self.WriteVar = channel.unary_unary(
                '/SharedVariable/WriteVar',
                request_serializer=shared__variable__pb2.WriteVarReq.SerializeToString,
                response_deserializer=shared__variable__pb2.WriteVarReply.FromString,
                )


class SharedVariableServicer(object):
    """Topology control 
    """

    def Join(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ChangePrev(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ChangeNNext(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def NodeMissing(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def TopologyRepairComplete(self, request, context):
        """signal that the topology repair has been completed 
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Election(self, request, context):
        """Leader election 

        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Elected(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ReadVar(self, request, context):
        """Shared variable 

        asks leader for the variable and timestamp 
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def WriteVar(self, request, context):
        """send new variable to leader and ask for timestamp 
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_SharedVariableServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'Join': grpc.unary_unary_rpc_method_handler(
                    servicer.Join,
                    request_deserializer=shared__variable__pb2.JoinReq.FromString,
                    response_serializer=shared__variable__pb2.JoinReply.SerializeToString,
            ),
            'ChangePrev': grpc.unary_unary_rpc_method_handler(
                    servicer.ChangePrev,
                    request_deserializer=shared__variable__pb2.ChangePrevMsg.FromString,
                    response_serializer=shared__variable__pb2.Address.SerializeToString,
            ),
            'ChangeNNext': grpc.unary_unary_rpc_method_handler(
                    servicer.ChangeNNext,
                    request_deserializer=shared__variable__pb2.ChangeNNextMsg.FromString,
                    response_serializer=shared__variable__pb2.Ack.SerializeToString,
            ),
            'NodeMissing': grpc.unary_unary_rpc_method_handler(
                    servicer.NodeMissing,
                    request_deserializer=shared__variable__pb2.NodeMissingMsg.FromString,
                    response_serializer=shared__variable__pb2.Ack.SerializeToString,
            ),
            'TopologyRepairComplete': grpc.unary_unary_rpc_method_handler(
                    servicer.TopologyRepairComplete,
                    request_deserializer=shared__variable__pb2.TopologyRepairCompleteMsg.FromString,
                    response_serializer=shared__variable__pb2.Ack.SerializeToString,
            ),
            'Election': grpc.unary_unary_rpc_method_handler(
                    servicer.Election,
                    request_deserializer=shared__variable__pb2.ElectionMsg.FromString,
                    response_serializer=shared__variable__pb2.Ack.SerializeToString,
            ),
            'Elected': grpc.unary_unary_rpc_method_handler(
                    servicer.Elected,
                    request_deserializer=shared__variable__pb2.ElectedMsg.FromString,
                    response_serializer=shared__variable__pb2.Ack.SerializeToString,
            ),
            'ReadVar': grpc.unary_unary_rpc_method_handler(
                    servicer.ReadVar,
                    request_deserializer=shared__variable__pb2.ReadVarReq.FromString,
                    response_serializer=shared__variable__pb2.ReadVarReply.SerializeToString,
            ),
            'WriteVar': grpc.unary_unary_rpc_method_handler(
                    servicer.WriteVar,
                    request_deserializer=shared__variable__pb2.WriteVarReq.FromString,
                    response_serializer=shared__variable__pb2.WriteVarReply.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'SharedVariable', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class SharedVariable(object):
    """Topology control 
    """

    @staticmethod
    def Join(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/SharedVariable/Join',
            shared__variable__pb2.JoinReq.SerializeToString,
            shared__variable__pb2.JoinReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ChangePrev(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/SharedVariable/ChangePrev',
            shared__variable__pb2.ChangePrevMsg.SerializeToString,
            shared__variable__pb2.Address.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ChangeNNext(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/SharedVariable/ChangeNNext',
            shared__variable__pb2.ChangeNNextMsg.SerializeToString,
            shared__variable__pb2.Ack.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def NodeMissing(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/SharedVariable/NodeMissing',
            shared__variable__pb2.NodeMissingMsg.SerializeToString,
            shared__variable__pb2.Ack.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def TopologyRepairComplete(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/SharedVariable/TopologyRepairComplete',
            shared__variable__pb2.TopologyRepairCompleteMsg.SerializeToString,
            shared__variable__pb2.Ack.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Election(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/SharedVariable/Election',
            shared__variable__pb2.ElectionMsg.SerializeToString,
            shared__variable__pb2.Ack.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Elected(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/SharedVariable/Elected',
            shared__variable__pb2.ElectedMsg.SerializeToString,
            shared__variable__pb2.Ack.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ReadVar(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/SharedVariable/ReadVar',
            shared__variable__pb2.ReadVarReq.SerializeToString,
            shared__variable__pb2.ReadVarReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def WriteVar(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/SharedVariable/WriteVar',
            shared__variable__pb2.WriteVarReq.SerializeToString,
            shared__variable__pb2.WriteVarReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
